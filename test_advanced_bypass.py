#!/usr/bin/env python3
"""
Test du syst√®me de contournement avanc√© anti-bot
"""

import tempfile
import os
from scraper.anime_sama_scraper import AnimeSamaScraper
from utils.beautiful_progress import BeautifulLogger
from utils.advanced_bypass import AdvancedAntiDetectionBypass

def test_advanced_bypass_direct():
    """Test direct du syst√®me de contournement avanc√©"""
    BeautifulLogger.info("Test direct du syst√®me de contournement avanc√©...", "ü•∑")
    
    try:
        bypass = AdvancedAntiDetectionBypass(verbose=True)
        
        # Test acc√®s page principale
        response = bypass.bypass_request("https://anime-sama.fr/", max_retries=3)
        
        if response and response.status_code == 200:
            BeautifulLogger.success("‚úÖ Contournement r√©ussi - Page principale accessible")
            
            # Test page manga
            manga_response = bypass.bypass_request(
                "https://anime-sama.fr/catalogue/lookism/scan/vf/",
                max_retries=3
            )
            
            if manga_response and manga_response.status_code == 200:
                BeautifulLogger.success("‚úÖ Contournement r√©ussi - Page manga accessible")
                return True
            else:
                BeautifulLogger.warning("‚ö†Ô∏è Page manga non accessible")
                return False
        else:
            BeautifulLogger.warning("‚ö†Ô∏è Page principale non accessible")
            return False
            
    except Exception as e:
        BeautifulLogger.error(f"Erreur test bypass: {e}")
        return False

def test_scraper_with_bypass():
    """Test du scraper avec syst√®me de contournement"""
    BeautifulLogger.info("Test scraper avec contournement avanc√©...", "üéØ")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # Cr√©er le scraper avec contournement avanc√©
            scraper = AnimeSamaScraper(
                output_dir=temp_dir,
                temp_dir=os.path.join(temp_dir, "temp"),
                verbose=True,
                use_residential_proxy=False,  # D√©sactiver proxies pour test pur
                use_advanced_bypass=True      # Activer contournement avanc√©
            )
            
            BeautifulLogger.info("Test t√©l√©chargement avec contournement...", "üìñ")
            
            # Test simple t√©l√©chargement
            success = scraper.download_chapter("lookism", 1)
            
            if success:
                # V√©rifier fichier
                cbz_files = [f for f in os.listdir(temp_dir) if f.endswith('.cbz')]
                if cbz_files:
                    file_size = os.path.getsize(os.path.join(temp_dir, cbz_files[0])) / (1024 * 1024)
                    BeautifulLogger.success(f"‚úÖ T√âL√âCHARGEMENT R√âUSSI: {cbz_files[0]} ({file_size:.1f} MB)")
                    return True
                else:
                    BeautifulLogger.warning("‚ö†Ô∏è Pas de fichier CBZ g√©n√©r√©")
                    return False
            else:
                BeautifulLogger.warning("‚ö†Ô∏è T√©l√©chargement √©chou√©")
                return False
                
    except Exception as e:
        BeautifulLogger.error(f"Erreur test scraper: {e}")
        return False

def test_hybrid_system():
    """Test du syst√®me hybride (contournement + proxies)"""
    BeautifulLogger.info("Test syst√®me hybride complet...", "üöÄ")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # Cr√©er le scraper avec tous les syst√®mes
            scraper = AnimeSamaScraper(
                output_dir=temp_dir,
                temp_dir=os.path.join(temp_dir, "temp"),
                verbose=True,
                use_residential_proxy=True,   # Proxies r√©sidentiels
                use_advanced_bypass=True      # + Contournement avanc√©
            )
            
            BeautifulLogger.info("Test syst√®me hybride complet...", "üî•")
            
            # Test t√©l√©chargement
            success = scraper.download_chapter("fairy tail", 1)
            
            if success:
                cbz_files = [f for f in os.listdir(temp_dir) if f.endswith('.cbz')]
                if cbz_files:
                    BeautifulLogger.success(f"‚úÖ SYST√àME HYBRIDE OP√âRATIONNEL: {cbz_files[0]}")
                    return True
                else:
                    BeautifulLogger.warning("‚ö†Ô∏è Pas de fichier CBZ g√©n√©r√©")
                    return False
            else:
                BeautifulLogger.warning("‚ö†Ô∏è T√©l√©chargement √©chou√©")
                return False
                
    except Exception as e:
        BeautifulLogger.error(f"Erreur test hybride: {e}")
        return False

def main():
    """Test complet du syst√®me de contournement avanc√©"""
    print("="*80)
    BeautifulLogger.info("ü•∑ TEST SYST√àME DE CONTOURNEMENT AVANC√â", "üöÄ")
    print("="*80)
    
    # Test 1: Bypass direct
    bypass_success = test_advanced_bypass_direct()
    print("-" * 50)
    
    # Test 2: Scraper avec bypass
    scraper_success = test_scraper_with_bypass()
    print("-" * 50)
    
    # Test 3: Syst√®me hybride
    hybrid_success = test_hybrid_system()
    print("-" * 50)
    
    # R√©sum√©
    print("="*80)
    if bypass_success:
        BeautifulLogger.success("üéâ CONTOURNEMENT AVANC√â OP√âRATIONNEL")
        
        if scraper_success:
            BeautifulLogger.success("üéØ SCRAPER AVEC CONTOURNEMENT R√âUSSI")
        
        if hybrid_success:
            BeautifulLogger.success("üî• SYST√àME HYBRIDE PARFAIT")
        
        print("‚úÖ Syst√®me de contournement fonctionnel")
        print("ü•∑ Protections anti-bot contourn√©es")
        print("üöÄ Bot pr√™t pour anime-sama.fr")
        
    else:
        BeautifulLogger.warning("‚ö†Ô∏è CONTOURNEMENT PARTIEL")
        print("üîß Syst√®me technique avanc√© mais restrictions fortes")
        print("üéØ Architecture pr√™te pour autres sources")
    
    print("="*80)
    return bypass_success or scraper_success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)